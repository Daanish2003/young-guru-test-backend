
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Login` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Login
 * 
 */
export type LoginModel = runtime.Types.Result.DefaultSelection<Prisma.$LoginPayload>

export type AggregateLogin = {
  _count: LoginCountAggregateOutputType | null
  _min: LoginMinAggregateOutputType | null
  _max: LoginMaxAggregateOutputType | null
}

export type LoginMinAggregateOutputType = {
  id: string | null
  user_id: string | null
  login_time: Date | null
  ip_address: string | null
}

export type LoginMaxAggregateOutputType = {
  id: string | null
  user_id: string | null
  login_time: Date | null
  ip_address: string | null
}

export type LoginCountAggregateOutputType = {
  id: number
  user_id: number
  login_time: number
  ip_address: number
  _all: number
}


export type LoginMinAggregateInputType = {
  id?: true
  user_id?: true
  login_time?: true
  ip_address?: true
}

export type LoginMaxAggregateInputType = {
  id?: true
  user_id?: true
  login_time?: true
  ip_address?: true
}

export type LoginCountAggregateInputType = {
  id?: true
  user_id?: true
  login_time?: true
  ip_address?: true
  _all?: true
}

export type LoginAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Login to aggregate.
   */
  where?: Prisma.LoginWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Logins to fetch.
   */
  orderBy?: Prisma.LoginOrderByWithRelationInput | Prisma.LoginOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.LoginWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Logins from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Logins.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Logins
  **/
  _count?: true | LoginCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: LoginMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: LoginMaxAggregateInputType
}

export type GetLoginAggregateType<T extends LoginAggregateArgs> = {
      [P in keyof T & keyof AggregateLogin]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLogin[P]>
    : Prisma.GetScalarType<T[P], AggregateLogin[P]>
}




export type LoginGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LoginWhereInput
  orderBy?: Prisma.LoginOrderByWithAggregationInput | Prisma.LoginOrderByWithAggregationInput[]
  by: Prisma.LoginScalarFieldEnum[] | Prisma.LoginScalarFieldEnum
  having?: Prisma.LoginScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: LoginCountAggregateInputType | true
  _min?: LoginMinAggregateInputType
  _max?: LoginMaxAggregateInputType
}

export type LoginGroupByOutputType = {
  id: string
  user_id: string
  login_time: Date
  ip_address: string
  _count: LoginCountAggregateOutputType | null
  _min: LoginMinAggregateOutputType | null
  _max: LoginMaxAggregateOutputType | null
}

type GetLoginGroupByPayload<T extends LoginGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<LoginGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof LoginGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], LoginGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], LoginGroupByOutputType[P]>
      }
    >
  > 



export type LoginWhereInput = {
  AND?: Prisma.LoginWhereInput | Prisma.LoginWhereInput[]
  OR?: Prisma.LoginWhereInput[]
  NOT?: Prisma.LoginWhereInput | Prisma.LoginWhereInput[]
  id?: Prisma.StringFilter<"Login"> | string
  user_id?: Prisma.StringFilter<"Login"> | string
  login_time?: Prisma.DateTimeFilter<"Login"> | Date | string
  ip_address?: Prisma.StringFilter<"Login"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type LoginOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  login_time?: Prisma.SortOrder
  ip_address?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type LoginWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.LoginWhereInput | Prisma.LoginWhereInput[]
  OR?: Prisma.LoginWhereInput[]
  NOT?: Prisma.LoginWhereInput | Prisma.LoginWhereInput[]
  user_id?: Prisma.StringFilter<"Login"> | string
  login_time?: Prisma.DateTimeFilter<"Login"> | Date | string
  ip_address?: Prisma.StringFilter<"Login"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type LoginOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  login_time?: Prisma.SortOrder
  ip_address?: Prisma.SortOrder
  _count?: Prisma.LoginCountOrderByAggregateInput
  _max?: Prisma.LoginMaxOrderByAggregateInput
  _min?: Prisma.LoginMinOrderByAggregateInput
}

export type LoginScalarWhereWithAggregatesInput = {
  AND?: Prisma.LoginScalarWhereWithAggregatesInput | Prisma.LoginScalarWhereWithAggregatesInput[]
  OR?: Prisma.LoginScalarWhereWithAggregatesInput[]
  NOT?: Prisma.LoginScalarWhereWithAggregatesInput | Prisma.LoginScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Login"> | string
  user_id?: Prisma.StringWithAggregatesFilter<"Login"> | string
  login_time?: Prisma.DateTimeWithAggregatesFilter<"Login"> | Date | string
  ip_address?: Prisma.StringWithAggregatesFilter<"Login"> | string
}

export type LoginCreateInput = {
  id?: string
  login_time?: Date | string
  ip_address: string
  user: Prisma.UserCreateNestedOneWithoutLoginsInput
}

export type LoginUncheckedCreateInput = {
  id?: string
  user_id: string
  login_time?: Date | string
  ip_address: string
}

export type LoginUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  login_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ip_address?: Prisma.StringFieldUpdateOperationsInput | string
  user?: Prisma.UserUpdateOneRequiredWithoutLoginsNestedInput
}

export type LoginUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  login_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ip_address?: Prisma.StringFieldUpdateOperationsInput | string
}

export type LoginCreateManyInput = {
  id?: string
  user_id: string
  login_time?: Date | string
  ip_address: string
}

export type LoginUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  login_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ip_address?: Prisma.StringFieldUpdateOperationsInput | string
}

export type LoginUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  login_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ip_address?: Prisma.StringFieldUpdateOperationsInput | string
}

export type LoginListRelationFilter = {
  every?: Prisma.LoginWhereInput
  some?: Prisma.LoginWhereInput
  none?: Prisma.LoginWhereInput
}

export type LoginOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type LoginCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  login_time?: Prisma.SortOrder
  ip_address?: Prisma.SortOrder
}

export type LoginMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  login_time?: Prisma.SortOrder
  ip_address?: Prisma.SortOrder
}

export type LoginMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  login_time?: Prisma.SortOrder
  ip_address?: Prisma.SortOrder
}

export type LoginCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.LoginCreateWithoutUserInput, Prisma.LoginUncheckedCreateWithoutUserInput> | Prisma.LoginCreateWithoutUserInput[] | Prisma.LoginUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.LoginCreateOrConnectWithoutUserInput | Prisma.LoginCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.LoginCreateManyUserInputEnvelope
  connect?: Prisma.LoginWhereUniqueInput | Prisma.LoginWhereUniqueInput[]
}

export type LoginUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.LoginCreateWithoutUserInput, Prisma.LoginUncheckedCreateWithoutUserInput> | Prisma.LoginCreateWithoutUserInput[] | Prisma.LoginUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.LoginCreateOrConnectWithoutUserInput | Prisma.LoginCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.LoginCreateManyUserInputEnvelope
  connect?: Prisma.LoginWhereUniqueInput | Prisma.LoginWhereUniqueInput[]
}

export type LoginUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.LoginCreateWithoutUserInput, Prisma.LoginUncheckedCreateWithoutUserInput> | Prisma.LoginCreateWithoutUserInput[] | Prisma.LoginUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.LoginCreateOrConnectWithoutUserInput | Prisma.LoginCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.LoginUpsertWithWhereUniqueWithoutUserInput | Prisma.LoginUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.LoginCreateManyUserInputEnvelope
  set?: Prisma.LoginWhereUniqueInput | Prisma.LoginWhereUniqueInput[]
  disconnect?: Prisma.LoginWhereUniqueInput | Prisma.LoginWhereUniqueInput[]
  delete?: Prisma.LoginWhereUniqueInput | Prisma.LoginWhereUniqueInput[]
  connect?: Prisma.LoginWhereUniqueInput | Prisma.LoginWhereUniqueInput[]
  update?: Prisma.LoginUpdateWithWhereUniqueWithoutUserInput | Prisma.LoginUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.LoginUpdateManyWithWhereWithoutUserInput | Prisma.LoginUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.LoginScalarWhereInput | Prisma.LoginScalarWhereInput[]
}

export type LoginUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.LoginCreateWithoutUserInput, Prisma.LoginUncheckedCreateWithoutUserInput> | Prisma.LoginCreateWithoutUserInput[] | Prisma.LoginUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.LoginCreateOrConnectWithoutUserInput | Prisma.LoginCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.LoginUpsertWithWhereUniqueWithoutUserInput | Prisma.LoginUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.LoginCreateManyUserInputEnvelope
  set?: Prisma.LoginWhereUniqueInput | Prisma.LoginWhereUniqueInput[]
  disconnect?: Prisma.LoginWhereUniqueInput | Prisma.LoginWhereUniqueInput[]
  delete?: Prisma.LoginWhereUniqueInput | Prisma.LoginWhereUniqueInput[]
  connect?: Prisma.LoginWhereUniqueInput | Prisma.LoginWhereUniqueInput[]
  update?: Prisma.LoginUpdateWithWhereUniqueWithoutUserInput | Prisma.LoginUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.LoginUpdateManyWithWhereWithoutUserInput | Prisma.LoginUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.LoginScalarWhereInput | Prisma.LoginScalarWhereInput[]
}

export type LoginCreateWithoutUserInput = {
  id?: string
  login_time?: Date | string
  ip_address: string
}

export type LoginUncheckedCreateWithoutUserInput = {
  id?: string
  login_time?: Date | string
  ip_address: string
}

export type LoginCreateOrConnectWithoutUserInput = {
  where: Prisma.LoginWhereUniqueInput
  create: Prisma.XOR<Prisma.LoginCreateWithoutUserInput, Prisma.LoginUncheckedCreateWithoutUserInput>
}

export type LoginCreateManyUserInputEnvelope = {
  data: Prisma.LoginCreateManyUserInput | Prisma.LoginCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type LoginUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.LoginWhereUniqueInput
  update: Prisma.XOR<Prisma.LoginUpdateWithoutUserInput, Prisma.LoginUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.LoginCreateWithoutUserInput, Prisma.LoginUncheckedCreateWithoutUserInput>
}

export type LoginUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.LoginWhereUniqueInput
  data: Prisma.XOR<Prisma.LoginUpdateWithoutUserInput, Prisma.LoginUncheckedUpdateWithoutUserInput>
}

export type LoginUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.LoginScalarWhereInput
  data: Prisma.XOR<Prisma.LoginUpdateManyMutationInput, Prisma.LoginUncheckedUpdateManyWithoutUserInput>
}

export type LoginScalarWhereInput = {
  AND?: Prisma.LoginScalarWhereInput | Prisma.LoginScalarWhereInput[]
  OR?: Prisma.LoginScalarWhereInput[]
  NOT?: Prisma.LoginScalarWhereInput | Prisma.LoginScalarWhereInput[]
  id?: Prisma.StringFilter<"Login"> | string
  user_id?: Prisma.StringFilter<"Login"> | string
  login_time?: Prisma.DateTimeFilter<"Login"> | Date | string
  ip_address?: Prisma.StringFilter<"Login"> | string
}

export type LoginCreateManyUserInput = {
  id?: string
  login_time?: Date | string
  ip_address: string
}

export type LoginUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  login_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ip_address?: Prisma.StringFieldUpdateOperationsInput | string
}

export type LoginUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  login_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ip_address?: Prisma.StringFieldUpdateOperationsInput | string
}

export type LoginUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  login_time?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ip_address?: Prisma.StringFieldUpdateOperationsInput | string
}



export type LoginSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  login_time?: boolean
  ip_address?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["login"]>

export type LoginSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  login_time?: boolean
  ip_address?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["login"]>

export type LoginSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  login_time?: boolean
  ip_address?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["login"]>

export type LoginSelectScalar = {
  id?: boolean
  user_id?: boolean
  login_time?: boolean
  ip_address?: boolean
}

export type LoginOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "user_id" | "login_time" | "ip_address", ExtArgs["result"]["login"]>
export type LoginInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type LoginIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type LoginIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $LoginPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Login"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    user_id: string
    login_time: Date
    ip_address: string
  }, ExtArgs["result"]["login"]>
  composites: {}
}

export type LoginGetPayload<S extends boolean | null | undefined | LoginDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$LoginPayload, S>

export type LoginCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<LoginFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: LoginCountAggregateInputType | true
  }

export interface LoginDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Login'], meta: { name: 'Login' } }
  /**
   * Find zero or one Login that matches the filter.
   * @param {LoginFindUniqueArgs} args - Arguments to find a Login
   * @example
   * // Get one Login
   * const login = await prisma.login.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends LoginFindUniqueArgs>(args: Prisma.SelectSubset<T, LoginFindUniqueArgs<ExtArgs>>): Prisma.Prisma__LoginClient<runtime.Types.Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Login that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {LoginFindUniqueOrThrowArgs} args - Arguments to find a Login
   * @example
   * // Get one Login
   * const login = await prisma.login.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends LoginFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, LoginFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__LoginClient<runtime.Types.Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Login that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LoginFindFirstArgs} args - Arguments to find a Login
   * @example
   * // Get one Login
   * const login = await prisma.login.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends LoginFindFirstArgs>(args?: Prisma.SelectSubset<T, LoginFindFirstArgs<ExtArgs>>): Prisma.Prisma__LoginClient<runtime.Types.Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Login that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LoginFindFirstOrThrowArgs} args - Arguments to find a Login
   * @example
   * // Get one Login
   * const login = await prisma.login.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends LoginFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, LoginFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__LoginClient<runtime.Types.Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Logins that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LoginFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Logins
   * const logins = await prisma.login.findMany()
   * 
   * // Get first 10 Logins
   * const logins = await prisma.login.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const loginWithIdOnly = await prisma.login.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends LoginFindManyArgs>(args?: Prisma.SelectSubset<T, LoginFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Login.
   * @param {LoginCreateArgs} args - Arguments to create a Login.
   * @example
   * // Create one Login
   * const Login = await prisma.login.create({
   *   data: {
   *     // ... data to create a Login
   *   }
   * })
   * 
   */
  create<T extends LoginCreateArgs>(args: Prisma.SelectSubset<T, LoginCreateArgs<ExtArgs>>): Prisma.Prisma__LoginClient<runtime.Types.Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Logins.
   * @param {LoginCreateManyArgs} args - Arguments to create many Logins.
   * @example
   * // Create many Logins
   * const login = await prisma.login.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends LoginCreateManyArgs>(args?: Prisma.SelectSubset<T, LoginCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Logins and returns the data saved in the database.
   * @param {LoginCreateManyAndReturnArgs} args - Arguments to create many Logins.
   * @example
   * // Create many Logins
   * const login = await prisma.login.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Logins and only return the `id`
   * const loginWithIdOnly = await prisma.login.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends LoginCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, LoginCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Login.
   * @param {LoginDeleteArgs} args - Arguments to delete one Login.
   * @example
   * // Delete one Login
   * const Login = await prisma.login.delete({
   *   where: {
   *     // ... filter to delete one Login
   *   }
   * })
   * 
   */
  delete<T extends LoginDeleteArgs>(args: Prisma.SelectSubset<T, LoginDeleteArgs<ExtArgs>>): Prisma.Prisma__LoginClient<runtime.Types.Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Login.
   * @param {LoginUpdateArgs} args - Arguments to update one Login.
   * @example
   * // Update one Login
   * const login = await prisma.login.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends LoginUpdateArgs>(args: Prisma.SelectSubset<T, LoginUpdateArgs<ExtArgs>>): Prisma.Prisma__LoginClient<runtime.Types.Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Logins.
   * @param {LoginDeleteManyArgs} args - Arguments to filter Logins to delete.
   * @example
   * // Delete a few Logins
   * const { count } = await prisma.login.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends LoginDeleteManyArgs>(args?: Prisma.SelectSubset<T, LoginDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Logins.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LoginUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Logins
   * const login = await prisma.login.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends LoginUpdateManyArgs>(args: Prisma.SelectSubset<T, LoginUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Logins and returns the data updated in the database.
   * @param {LoginUpdateManyAndReturnArgs} args - Arguments to update many Logins.
   * @example
   * // Update many Logins
   * const login = await prisma.login.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Logins and only return the `id`
   * const loginWithIdOnly = await prisma.login.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends LoginUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, LoginUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Login.
   * @param {LoginUpsertArgs} args - Arguments to update or create a Login.
   * @example
   * // Update or create a Login
   * const login = await prisma.login.upsert({
   *   create: {
   *     // ... data to create a Login
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Login we want to update
   *   }
   * })
   */
  upsert<T extends LoginUpsertArgs>(args: Prisma.SelectSubset<T, LoginUpsertArgs<ExtArgs>>): Prisma.Prisma__LoginClient<runtime.Types.Result.GetResult<Prisma.$LoginPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Logins.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LoginCountArgs} args - Arguments to filter Logins to count.
   * @example
   * // Count the number of Logins
   * const count = await prisma.login.count({
   *   where: {
   *     // ... the filter for the Logins we want to count
   *   }
   * })
  **/
  count<T extends LoginCountArgs>(
    args?: Prisma.Subset<T, LoginCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], LoginCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Login.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LoginAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends LoginAggregateArgs>(args: Prisma.Subset<T, LoginAggregateArgs>): Prisma.PrismaPromise<GetLoginAggregateType<T>>

  /**
   * Group by Login.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LoginGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends LoginGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: LoginGroupByArgs['orderBy'] }
      : { orderBy?: LoginGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, LoginGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLoginGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Login model
 */
readonly fields: LoginFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Login.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__LoginClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Login model
 */
export interface LoginFieldRefs {
  readonly id: Prisma.FieldRef<"Login", 'String'>
  readonly user_id: Prisma.FieldRef<"Login", 'String'>
  readonly login_time: Prisma.FieldRef<"Login", 'DateTime'>
  readonly ip_address: Prisma.FieldRef<"Login", 'String'>
}
    

// Custom InputTypes
/**
 * Login findUnique
 */
export type LoginFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Login
   */
  select?: Prisma.LoginSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Login
   */
  omit?: Prisma.LoginOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LoginInclude<ExtArgs> | null
  /**
   * Filter, which Login to fetch.
   */
  where: Prisma.LoginWhereUniqueInput
}

/**
 * Login findUniqueOrThrow
 */
export type LoginFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Login
   */
  select?: Prisma.LoginSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Login
   */
  omit?: Prisma.LoginOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LoginInclude<ExtArgs> | null
  /**
   * Filter, which Login to fetch.
   */
  where: Prisma.LoginWhereUniqueInput
}

/**
 * Login findFirst
 */
export type LoginFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Login
   */
  select?: Prisma.LoginSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Login
   */
  omit?: Prisma.LoginOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LoginInclude<ExtArgs> | null
  /**
   * Filter, which Login to fetch.
   */
  where?: Prisma.LoginWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Logins to fetch.
   */
  orderBy?: Prisma.LoginOrderByWithRelationInput | Prisma.LoginOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Logins.
   */
  cursor?: Prisma.LoginWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Logins from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Logins.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Logins.
   */
  distinct?: Prisma.LoginScalarFieldEnum | Prisma.LoginScalarFieldEnum[]
}

/**
 * Login findFirstOrThrow
 */
export type LoginFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Login
   */
  select?: Prisma.LoginSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Login
   */
  omit?: Prisma.LoginOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LoginInclude<ExtArgs> | null
  /**
   * Filter, which Login to fetch.
   */
  where?: Prisma.LoginWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Logins to fetch.
   */
  orderBy?: Prisma.LoginOrderByWithRelationInput | Prisma.LoginOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Logins.
   */
  cursor?: Prisma.LoginWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Logins from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Logins.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Logins.
   */
  distinct?: Prisma.LoginScalarFieldEnum | Prisma.LoginScalarFieldEnum[]
}

/**
 * Login findMany
 */
export type LoginFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Login
   */
  select?: Prisma.LoginSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Login
   */
  omit?: Prisma.LoginOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LoginInclude<ExtArgs> | null
  /**
   * Filter, which Logins to fetch.
   */
  where?: Prisma.LoginWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Logins to fetch.
   */
  orderBy?: Prisma.LoginOrderByWithRelationInput | Prisma.LoginOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Logins.
   */
  cursor?: Prisma.LoginWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Logins from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Logins.
   */
  skip?: number
  distinct?: Prisma.LoginScalarFieldEnum | Prisma.LoginScalarFieldEnum[]
}

/**
 * Login create
 */
export type LoginCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Login
   */
  select?: Prisma.LoginSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Login
   */
  omit?: Prisma.LoginOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LoginInclude<ExtArgs> | null
  /**
   * The data needed to create a Login.
   */
  data: Prisma.XOR<Prisma.LoginCreateInput, Prisma.LoginUncheckedCreateInput>
}

/**
 * Login createMany
 */
export type LoginCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Logins.
   */
  data: Prisma.LoginCreateManyInput | Prisma.LoginCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Login createManyAndReturn
 */
export type LoginCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Login
   */
  select?: Prisma.LoginSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Login
   */
  omit?: Prisma.LoginOmit<ExtArgs> | null
  /**
   * The data used to create many Logins.
   */
  data: Prisma.LoginCreateManyInput | Prisma.LoginCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LoginIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Login update
 */
export type LoginUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Login
   */
  select?: Prisma.LoginSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Login
   */
  omit?: Prisma.LoginOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LoginInclude<ExtArgs> | null
  /**
   * The data needed to update a Login.
   */
  data: Prisma.XOR<Prisma.LoginUpdateInput, Prisma.LoginUncheckedUpdateInput>
  /**
   * Choose, which Login to update.
   */
  where: Prisma.LoginWhereUniqueInput
}

/**
 * Login updateMany
 */
export type LoginUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Logins.
   */
  data: Prisma.XOR<Prisma.LoginUpdateManyMutationInput, Prisma.LoginUncheckedUpdateManyInput>
  /**
   * Filter which Logins to update
   */
  where?: Prisma.LoginWhereInput
  /**
   * Limit how many Logins to update.
   */
  limit?: number
}

/**
 * Login updateManyAndReturn
 */
export type LoginUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Login
   */
  select?: Prisma.LoginSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Login
   */
  omit?: Prisma.LoginOmit<ExtArgs> | null
  /**
   * The data used to update Logins.
   */
  data: Prisma.XOR<Prisma.LoginUpdateManyMutationInput, Prisma.LoginUncheckedUpdateManyInput>
  /**
   * Filter which Logins to update
   */
  where?: Prisma.LoginWhereInput
  /**
   * Limit how many Logins to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LoginIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Login upsert
 */
export type LoginUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Login
   */
  select?: Prisma.LoginSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Login
   */
  omit?: Prisma.LoginOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LoginInclude<ExtArgs> | null
  /**
   * The filter to search for the Login to update in case it exists.
   */
  where: Prisma.LoginWhereUniqueInput
  /**
   * In case the Login found by the `where` argument doesn't exist, create a new Login with this data.
   */
  create: Prisma.XOR<Prisma.LoginCreateInput, Prisma.LoginUncheckedCreateInput>
  /**
   * In case the Login was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.LoginUpdateInput, Prisma.LoginUncheckedUpdateInput>
}

/**
 * Login delete
 */
export type LoginDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Login
   */
  select?: Prisma.LoginSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Login
   */
  omit?: Prisma.LoginOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LoginInclude<ExtArgs> | null
  /**
   * Filter which Login to delete.
   */
  where: Prisma.LoginWhereUniqueInput
}

/**
 * Login deleteMany
 */
export type LoginDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Logins to delete
   */
  where?: Prisma.LoginWhereInput
  /**
   * Limit how many Logins to delete.
   */
  limit?: number
}

/**
 * Login without action
 */
export type LoginDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Login
   */
  select?: Prisma.LoginSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Login
   */
  omit?: Prisma.LoginOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LoginInclude<ExtArgs> | null
}
