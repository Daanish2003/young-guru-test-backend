
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `CourseAccess` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model CourseAccess
 * 
 */
export type CourseAccessModel = runtime.Types.Result.DefaultSelection<Prisma.$CourseAccessPayload>

export type AggregateCourseAccess = {
  _count: CourseAccessCountAggregateOutputType | null
  _min: CourseAccessMinAggregateOutputType | null
  _max: CourseAccessMaxAggregateOutputType | null
}

export type CourseAccessMinAggregateOutputType = {
  id: string | null
  user_id: string | null
  course_id: string | null
  unlocked_at: Date | null
}

export type CourseAccessMaxAggregateOutputType = {
  id: string | null
  user_id: string | null
  course_id: string | null
  unlocked_at: Date | null
}

export type CourseAccessCountAggregateOutputType = {
  id: number
  user_id: number
  course_id: number
  unlocked_at: number
  _all: number
}


export type CourseAccessMinAggregateInputType = {
  id?: true
  user_id?: true
  course_id?: true
  unlocked_at?: true
}

export type CourseAccessMaxAggregateInputType = {
  id?: true
  user_id?: true
  course_id?: true
  unlocked_at?: true
}

export type CourseAccessCountAggregateInputType = {
  id?: true
  user_id?: true
  course_id?: true
  unlocked_at?: true
  _all?: true
}

export type CourseAccessAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CourseAccess to aggregate.
   */
  where?: Prisma.CourseAccessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CourseAccesses to fetch.
   */
  orderBy?: Prisma.CourseAccessOrderByWithRelationInput | Prisma.CourseAccessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CourseAccessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CourseAccesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CourseAccesses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned CourseAccesses
  **/
  _count?: true | CourseAccessCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CourseAccessMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CourseAccessMaxAggregateInputType
}

export type GetCourseAccessAggregateType<T extends CourseAccessAggregateArgs> = {
      [P in keyof T & keyof AggregateCourseAccess]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCourseAccess[P]>
    : Prisma.GetScalarType<T[P], AggregateCourseAccess[P]>
}




export type CourseAccessGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CourseAccessWhereInput
  orderBy?: Prisma.CourseAccessOrderByWithAggregationInput | Prisma.CourseAccessOrderByWithAggregationInput[]
  by: Prisma.CourseAccessScalarFieldEnum[] | Prisma.CourseAccessScalarFieldEnum
  having?: Prisma.CourseAccessScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CourseAccessCountAggregateInputType | true
  _min?: CourseAccessMinAggregateInputType
  _max?: CourseAccessMaxAggregateInputType
}

export type CourseAccessGroupByOutputType = {
  id: string
  user_id: string
  course_id: string
  unlocked_at: Date
  _count: CourseAccessCountAggregateOutputType | null
  _min: CourseAccessMinAggregateOutputType | null
  _max: CourseAccessMaxAggregateOutputType | null
}

type GetCourseAccessGroupByPayload<T extends CourseAccessGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CourseAccessGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CourseAccessGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CourseAccessGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CourseAccessGroupByOutputType[P]>
      }
    >
  > 



export type CourseAccessWhereInput = {
  AND?: Prisma.CourseAccessWhereInput | Prisma.CourseAccessWhereInput[]
  OR?: Prisma.CourseAccessWhereInput[]
  NOT?: Prisma.CourseAccessWhereInput | Prisma.CourseAccessWhereInput[]
  id?: Prisma.StringFilter<"CourseAccess"> | string
  user_id?: Prisma.StringFilter<"CourseAccess"> | string
  course_id?: Prisma.StringFilter<"CourseAccess"> | string
  unlocked_at?: Prisma.DateTimeFilter<"CourseAccess"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  course?: Prisma.XOR<Prisma.CourseScalarRelationFilter, Prisma.CourseWhereInput>
}

export type CourseAccessOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  course_id?: Prisma.SortOrder
  unlocked_at?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  course?: Prisma.CourseOrderByWithRelationInput
}

export type CourseAccessWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.CourseAccessWhereInput | Prisma.CourseAccessWhereInput[]
  OR?: Prisma.CourseAccessWhereInput[]
  NOT?: Prisma.CourseAccessWhereInput | Prisma.CourseAccessWhereInput[]
  user_id?: Prisma.StringFilter<"CourseAccess"> | string
  course_id?: Prisma.StringFilter<"CourseAccess"> | string
  unlocked_at?: Prisma.DateTimeFilter<"CourseAccess"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  course?: Prisma.XOR<Prisma.CourseScalarRelationFilter, Prisma.CourseWhereInput>
}, "id">

export type CourseAccessOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  course_id?: Prisma.SortOrder
  unlocked_at?: Prisma.SortOrder
  _count?: Prisma.CourseAccessCountOrderByAggregateInput
  _max?: Prisma.CourseAccessMaxOrderByAggregateInput
  _min?: Prisma.CourseAccessMinOrderByAggregateInput
}

export type CourseAccessScalarWhereWithAggregatesInput = {
  AND?: Prisma.CourseAccessScalarWhereWithAggregatesInput | Prisma.CourseAccessScalarWhereWithAggregatesInput[]
  OR?: Prisma.CourseAccessScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CourseAccessScalarWhereWithAggregatesInput | Prisma.CourseAccessScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"CourseAccess"> | string
  user_id?: Prisma.StringWithAggregatesFilter<"CourseAccess"> | string
  course_id?: Prisma.StringWithAggregatesFilter<"CourseAccess"> | string
  unlocked_at?: Prisma.DateTimeWithAggregatesFilter<"CourseAccess"> | Date | string
}

export type CourseAccessCreateInput = {
  id?: string
  unlocked_at?: Date | string
  user: Prisma.UserCreateNestedOneWithoutCourseAccessesInput
  course: Prisma.CourseCreateNestedOneWithoutCourseAccessesInput
}

export type CourseAccessUncheckedCreateInput = {
  id?: string
  user_id: string
  course_id: string
  unlocked_at?: Date | string
}

export type CourseAccessUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  unlocked_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutCourseAccessesNestedInput
  course?: Prisma.CourseUpdateOneRequiredWithoutCourseAccessesNestedInput
}

export type CourseAccessUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  course_id?: Prisma.StringFieldUpdateOperationsInput | string
  unlocked_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CourseAccessCreateManyInput = {
  id?: string
  user_id: string
  course_id: string
  unlocked_at?: Date | string
}

export type CourseAccessUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  unlocked_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CourseAccessUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  course_id?: Prisma.StringFieldUpdateOperationsInput | string
  unlocked_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CourseAccessListRelationFilter = {
  every?: Prisma.CourseAccessWhereInput
  some?: Prisma.CourseAccessWhereInput
  none?: Prisma.CourseAccessWhereInput
}

export type CourseAccessOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CourseAccessCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  course_id?: Prisma.SortOrder
  unlocked_at?: Prisma.SortOrder
}

export type CourseAccessMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  course_id?: Prisma.SortOrder
  unlocked_at?: Prisma.SortOrder
}

export type CourseAccessMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  course_id?: Prisma.SortOrder
  unlocked_at?: Prisma.SortOrder
}

export type CourseAccessCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.CourseAccessCreateWithoutUserInput, Prisma.CourseAccessUncheckedCreateWithoutUserInput> | Prisma.CourseAccessCreateWithoutUserInput[] | Prisma.CourseAccessUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CourseAccessCreateOrConnectWithoutUserInput | Prisma.CourseAccessCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.CourseAccessCreateManyUserInputEnvelope
  connect?: Prisma.CourseAccessWhereUniqueInput | Prisma.CourseAccessWhereUniqueInput[]
}

export type CourseAccessUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.CourseAccessCreateWithoutUserInput, Prisma.CourseAccessUncheckedCreateWithoutUserInput> | Prisma.CourseAccessCreateWithoutUserInput[] | Prisma.CourseAccessUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CourseAccessCreateOrConnectWithoutUserInput | Prisma.CourseAccessCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.CourseAccessCreateManyUserInputEnvelope
  connect?: Prisma.CourseAccessWhereUniqueInput | Prisma.CourseAccessWhereUniqueInput[]
}

export type CourseAccessUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.CourseAccessCreateWithoutUserInput, Prisma.CourseAccessUncheckedCreateWithoutUserInput> | Prisma.CourseAccessCreateWithoutUserInput[] | Prisma.CourseAccessUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CourseAccessCreateOrConnectWithoutUserInput | Prisma.CourseAccessCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.CourseAccessUpsertWithWhereUniqueWithoutUserInput | Prisma.CourseAccessUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.CourseAccessCreateManyUserInputEnvelope
  set?: Prisma.CourseAccessWhereUniqueInput | Prisma.CourseAccessWhereUniqueInput[]
  disconnect?: Prisma.CourseAccessWhereUniqueInput | Prisma.CourseAccessWhereUniqueInput[]
  delete?: Prisma.CourseAccessWhereUniqueInput | Prisma.CourseAccessWhereUniqueInput[]
  connect?: Prisma.CourseAccessWhereUniqueInput | Prisma.CourseAccessWhereUniqueInput[]
  update?: Prisma.CourseAccessUpdateWithWhereUniqueWithoutUserInput | Prisma.CourseAccessUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.CourseAccessUpdateManyWithWhereWithoutUserInput | Prisma.CourseAccessUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.CourseAccessScalarWhereInput | Prisma.CourseAccessScalarWhereInput[]
}

export type CourseAccessUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.CourseAccessCreateWithoutUserInput, Prisma.CourseAccessUncheckedCreateWithoutUserInput> | Prisma.CourseAccessCreateWithoutUserInput[] | Prisma.CourseAccessUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CourseAccessCreateOrConnectWithoutUserInput | Prisma.CourseAccessCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.CourseAccessUpsertWithWhereUniqueWithoutUserInput | Prisma.CourseAccessUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.CourseAccessCreateManyUserInputEnvelope
  set?: Prisma.CourseAccessWhereUniqueInput | Prisma.CourseAccessWhereUniqueInput[]
  disconnect?: Prisma.CourseAccessWhereUniqueInput | Prisma.CourseAccessWhereUniqueInput[]
  delete?: Prisma.CourseAccessWhereUniqueInput | Prisma.CourseAccessWhereUniqueInput[]
  connect?: Prisma.CourseAccessWhereUniqueInput | Prisma.CourseAccessWhereUniqueInput[]
  update?: Prisma.CourseAccessUpdateWithWhereUniqueWithoutUserInput | Prisma.CourseAccessUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.CourseAccessUpdateManyWithWhereWithoutUserInput | Prisma.CourseAccessUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.CourseAccessScalarWhereInput | Prisma.CourseAccessScalarWhereInput[]
}

export type CourseAccessCreateNestedManyWithoutCourseInput = {
  create?: Prisma.XOR<Prisma.CourseAccessCreateWithoutCourseInput, Prisma.CourseAccessUncheckedCreateWithoutCourseInput> | Prisma.CourseAccessCreateWithoutCourseInput[] | Prisma.CourseAccessUncheckedCreateWithoutCourseInput[]
  connectOrCreate?: Prisma.CourseAccessCreateOrConnectWithoutCourseInput | Prisma.CourseAccessCreateOrConnectWithoutCourseInput[]
  createMany?: Prisma.CourseAccessCreateManyCourseInputEnvelope
  connect?: Prisma.CourseAccessWhereUniqueInput | Prisma.CourseAccessWhereUniqueInput[]
}

export type CourseAccessUncheckedCreateNestedManyWithoutCourseInput = {
  create?: Prisma.XOR<Prisma.CourseAccessCreateWithoutCourseInput, Prisma.CourseAccessUncheckedCreateWithoutCourseInput> | Prisma.CourseAccessCreateWithoutCourseInput[] | Prisma.CourseAccessUncheckedCreateWithoutCourseInput[]
  connectOrCreate?: Prisma.CourseAccessCreateOrConnectWithoutCourseInput | Prisma.CourseAccessCreateOrConnectWithoutCourseInput[]
  createMany?: Prisma.CourseAccessCreateManyCourseInputEnvelope
  connect?: Prisma.CourseAccessWhereUniqueInput | Prisma.CourseAccessWhereUniqueInput[]
}

export type CourseAccessUpdateManyWithoutCourseNestedInput = {
  create?: Prisma.XOR<Prisma.CourseAccessCreateWithoutCourseInput, Prisma.CourseAccessUncheckedCreateWithoutCourseInput> | Prisma.CourseAccessCreateWithoutCourseInput[] | Prisma.CourseAccessUncheckedCreateWithoutCourseInput[]
  connectOrCreate?: Prisma.CourseAccessCreateOrConnectWithoutCourseInput | Prisma.CourseAccessCreateOrConnectWithoutCourseInput[]
  upsert?: Prisma.CourseAccessUpsertWithWhereUniqueWithoutCourseInput | Prisma.CourseAccessUpsertWithWhereUniqueWithoutCourseInput[]
  createMany?: Prisma.CourseAccessCreateManyCourseInputEnvelope
  set?: Prisma.CourseAccessWhereUniqueInput | Prisma.CourseAccessWhereUniqueInput[]
  disconnect?: Prisma.CourseAccessWhereUniqueInput | Prisma.CourseAccessWhereUniqueInput[]
  delete?: Prisma.CourseAccessWhereUniqueInput | Prisma.CourseAccessWhereUniqueInput[]
  connect?: Prisma.CourseAccessWhereUniqueInput | Prisma.CourseAccessWhereUniqueInput[]
  update?: Prisma.CourseAccessUpdateWithWhereUniqueWithoutCourseInput | Prisma.CourseAccessUpdateWithWhereUniqueWithoutCourseInput[]
  updateMany?: Prisma.CourseAccessUpdateManyWithWhereWithoutCourseInput | Prisma.CourseAccessUpdateManyWithWhereWithoutCourseInput[]
  deleteMany?: Prisma.CourseAccessScalarWhereInput | Prisma.CourseAccessScalarWhereInput[]
}

export type CourseAccessUncheckedUpdateManyWithoutCourseNestedInput = {
  create?: Prisma.XOR<Prisma.CourseAccessCreateWithoutCourseInput, Prisma.CourseAccessUncheckedCreateWithoutCourseInput> | Prisma.CourseAccessCreateWithoutCourseInput[] | Prisma.CourseAccessUncheckedCreateWithoutCourseInput[]
  connectOrCreate?: Prisma.CourseAccessCreateOrConnectWithoutCourseInput | Prisma.CourseAccessCreateOrConnectWithoutCourseInput[]
  upsert?: Prisma.CourseAccessUpsertWithWhereUniqueWithoutCourseInput | Prisma.CourseAccessUpsertWithWhereUniqueWithoutCourseInput[]
  createMany?: Prisma.CourseAccessCreateManyCourseInputEnvelope
  set?: Prisma.CourseAccessWhereUniqueInput | Prisma.CourseAccessWhereUniqueInput[]
  disconnect?: Prisma.CourseAccessWhereUniqueInput | Prisma.CourseAccessWhereUniqueInput[]
  delete?: Prisma.CourseAccessWhereUniqueInput | Prisma.CourseAccessWhereUniqueInput[]
  connect?: Prisma.CourseAccessWhereUniqueInput | Prisma.CourseAccessWhereUniqueInput[]
  update?: Prisma.CourseAccessUpdateWithWhereUniqueWithoutCourseInput | Prisma.CourseAccessUpdateWithWhereUniqueWithoutCourseInput[]
  updateMany?: Prisma.CourseAccessUpdateManyWithWhereWithoutCourseInput | Prisma.CourseAccessUpdateManyWithWhereWithoutCourseInput[]
  deleteMany?: Prisma.CourseAccessScalarWhereInput | Prisma.CourseAccessScalarWhereInput[]
}

export type CourseAccessCreateWithoutUserInput = {
  id?: string
  unlocked_at?: Date | string
  course: Prisma.CourseCreateNestedOneWithoutCourseAccessesInput
}

export type CourseAccessUncheckedCreateWithoutUserInput = {
  id?: string
  course_id: string
  unlocked_at?: Date | string
}

export type CourseAccessCreateOrConnectWithoutUserInput = {
  where: Prisma.CourseAccessWhereUniqueInput
  create: Prisma.XOR<Prisma.CourseAccessCreateWithoutUserInput, Prisma.CourseAccessUncheckedCreateWithoutUserInput>
}

export type CourseAccessCreateManyUserInputEnvelope = {
  data: Prisma.CourseAccessCreateManyUserInput | Prisma.CourseAccessCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type CourseAccessUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.CourseAccessWhereUniqueInput
  update: Prisma.XOR<Prisma.CourseAccessUpdateWithoutUserInput, Prisma.CourseAccessUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.CourseAccessCreateWithoutUserInput, Prisma.CourseAccessUncheckedCreateWithoutUserInput>
}

export type CourseAccessUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.CourseAccessWhereUniqueInput
  data: Prisma.XOR<Prisma.CourseAccessUpdateWithoutUserInput, Prisma.CourseAccessUncheckedUpdateWithoutUserInput>
}

export type CourseAccessUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.CourseAccessScalarWhereInput
  data: Prisma.XOR<Prisma.CourseAccessUpdateManyMutationInput, Prisma.CourseAccessUncheckedUpdateManyWithoutUserInput>
}

export type CourseAccessScalarWhereInput = {
  AND?: Prisma.CourseAccessScalarWhereInput | Prisma.CourseAccessScalarWhereInput[]
  OR?: Prisma.CourseAccessScalarWhereInput[]
  NOT?: Prisma.CourseAccessScalarWhereInput | Prisma.CourseAccessScalarWhereInput[]
  id?: Prisma.StringFilter<"CourseAccess"> | string
  user_id?: Prisma.StringFilter<"CourseAccess"> | string
  course_id?: Prisma.StringFilter<"CourseAccess"> | string
  unlocked_at?: Prisma.DateTimeFilter<"CourseAccess"> | Date | string
}

export type CourseAccessCreateWithoutCourseInput = {
  id?: string
  unlocked_at?: Date | string
  user: Prisma.UserCreateNestedOneWithoutCourseAccessesInput
}

export type CourseAccessUncheckedCreateWithoutCourseInput = {
  id?: string
  user_id: string
  unlocked_at?: Date | string
}

export type CourseAccessCreateOrConnectWithoutCourseInput = {
  where: Prisma.CourseAccessWhereUniqueInput
  create: Prisma.XOR<Prisma.CourseAccessCreateWithoutCourseInput, Prisma.CourseAccessUncheckedCreateWithoutCourseInput>
}

export type CourseAccessCreateManyCourseInputEnvelope = {
  data: Prisma.CourseAccessCreateManyCourseInput | Prisma.CourseAccessCreateManyCourseInput[]
  skipDuplicates?: boolean
}

export type CourseAccessUpsertWithWhereUniqueWithoutCourseInput = {
  where: Prisma.CourseAccessWhereUniqueInput
  update: Prisma.XOR<Prisma.CourseAccessUpdateWithoutCourseInput, Prisma.CourseAccessUncheckedUpdateWithoutCourseInput>
  create: Prisma.XOR<Prisma.CourseAccessCreateWithoutCourseInput, Prisma.CourseAccessUncheckedCreateWithoutCourseInput>
}

export type CourseAccessUpdateWithWhereUniqueWithoutCourseInput = {
  where: Prisma.CourseAccessWhereUniqueInput
  data: Prisma.XOR<Prisma.CourseAccessUpdateWithoutCourseInput, Prisma.CourseAccessUncheckedUpdateWithoutCourseInput>
}

export type CourseAccessUpdateManyWithWhereWithoutCourseInput = {
  where: Prisma.CourseAccessScalarWhereInput
  data: Prisma.XOR<Prisma.CourseAccessUpdateManyMutationInput, Prisma.CourseAccessUncheckedUpdateManyWithoutCourseInput>
}

export type CourseAccessCreateManyUserInput = {
  id?: string
  course_id: string
  unlocked_at?: Date | string
}

export type CourseAccessUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  unlocked_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  course?: Prisma.CourseUpdateOneRequiredWithoutCourseAccessesNestedInput
}

export type CourseAccessUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  course_id?: Prisma.StringFieldUpdateOperationsInput | string
  unlocked_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CourseAccessUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  course_id?: Prisma.StringFieldUpdateOperationsInput | string
  unlocked_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CourseAccessCreateManyCourseInput = {
  id?: string
  user_id: string
  unlocked_at?: Date | string
}

export type CourseAccessUpdateWithoutCourseInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  unlocked_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutCourseAccessesNestedInput
}

export type CourseAccessUncheckedUpdateWithoutCourseInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  unlocked_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CourseAccessUncheckedUpdateManyWithoutCourseInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  unlocked_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type CourseAccessSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  course_id?: boolean
  unlocked_at?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  course?: boolean | Prisma.CourseDefaultArgs<ExtArgs>
}, ExtArgs["result"]["courseAccess"]>

export type CourseAccessSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  course_id?: boolean
  unlocked_at?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  course?: boolean | Prisma.CourseDefaultArgs<ExtArgs>
}, ExtArgs["result"]["courseAccess"]>

export type CourseAccessSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  course_id?: boolean
  unlocked_at?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  course?: boolean | Prisma.CourseDefaultArgs<ExtArgs>
}, ExtArgs["result"]["courseAccess"]>

export type CourseAccessSelectScalar = {
  id?: boolean
  user_id?: boolean
  course_id?: boolean
  unlocked_at?: boolean
}

export type CourseAccessOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "user_id" | "course_id" | "unlocked_at", ExtArgs["result"]["courseAccess"]>
export type CourseAccessInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  course?: boolean | Prisma.CourseDefaultArgs<ExtArgs>
}
export type CourseAccessIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  course?: boolean | Prisma.CourseDefaultArgs<ExtArgs>
}
export type CourseAccessIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  course?: boolean | Prisma.CourseDefaultArgs<ExtArgs>
}

export type $CourseAccessPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "CourseAccess"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    course: Prisma.$CoursePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    user_id: string
    course_id: string
    unlocked_at: Date
  }, ExtArgs["result"]["courseAccess"]>
  composites: {}
}

export type CourseAccessGetPayload<S extends boolean | null | undefined | CourseAccessDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CourseAccessPayload, S>

export type CourseAccessCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CourseAccessFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CourseAccessCountAggregateInputType | true
  }

export interface CourseAccessDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CourseAccess'], meta: { name: 'CourseAccess' } }
  /**
   * Find zero or one CourseAccess that matches the filter.
   * @param {CourseAccessFindUniqueArgs} args - Arguments to find a CourseAccess
   * @example
   * // Get one CourseAccess
   * const courseAccess = await prisma.courseAccess.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CourseAccessFindUniqueArgs>(args: Prisma.SelectSubset<T, CourseAccessFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CourseAccessClient<runtime.Types.Result.GetResult<Prisma.$CourseAccessPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one CourseAccess that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CourseAccessFindUniqueOrThrowArgs} args - Arguments to find a CourseAccess
   * @example
   * // Get one CourseAccess
   * const courseAccess = await prisma.courseAccess.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CourseAccessFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CourseAccessFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CourseAccessClient<runtime.Types.Result.GetResult<Prisma.$CourseAccessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CourseAccess that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CourseAccessFindFirstArgs} args - Arguments to find a CourseAccess
   * @example
   * // Get one CourseAccess
   * const courseAccess = await prisma.courseAccess.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CourseAccessFindFirstArgs>(args?: Prisma.SelectSubset<T, CourseAccessFindFirstArgs<ExtArgs>>): Prisma.Prisma__CourseAccessClient<runtime.Types.Result.GetResult<Prisma.$CourseAccessPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CourseAccess that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CourseAccessFindFirstOrThrowArgs} args - Arguments to find a CourseAccess
   * @example
   * // Get one CourseAccess
   * const courseAccess = await prisma.courseAccess.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CourseAccessFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CourseAccessFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CourseAccessClient<runtime.Types.Result.GetResult<Prisma.$CourseAccessPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more CourseAccesses that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CourseAccessFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CourseAccesses
   * const courseAccesses = await prisma.courseAccess.findMany()
   * 
   * // Get first 10 CourseAccesses
   * const courseAccesses = await prisma.courseAccess.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const courseAccessWithIdOnly = await prisma.courseAccess.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CourseAccessFindManyArgs>(args?: Prisma.SelectSubset<T, CourseAccessFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CourseAccessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a CourseAccess.
   * @param {CourseAccessCreateArgs} args - Arguments to create a CourseAccess.
   * @example
   * // Create one CourseAccess
   * const CourseAccess = await prisma.courseAccess.create({
   *   data: {
   *     // ... data to create a CourseAccess
   *   }
   * })
   * 
   */
  create<T extends CourseAccessCreateArgs>(args: Prisma.SelectSubset<T, CourseAccessCreateArgs<ExtArgs>>): Prisma.Prisma__CourseAccessClient<runtime.Types.Result.GetResult<Prisma.$CourseAccessPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many CourseAccesses.
   * @param {CourseAccessCreateManyArgs} args - Arguments to create many CourseAccesses.
   * @example
   * // Create many CourseAccesses
   * const courseAccess = await prisma.courseAccess.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CourseAccessCreateManyArgs>(args?: Prisma.SelectSubset<T, CourseAccessCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many CourseAccesses and returns the data saved in the database.
   * @param {CourseAccessCreateManyAndReturnArgs} args - Arguments to create many CourseAccesses.
   * @example
   * // Create many CourseAccesses
   * const courseAccess = await prisma.courseAccess.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many CourseAccesses and only return the `id`
   * const courseAccessWithIdOnly = await prisma.courseAccess.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CourseAccessCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CourseAccessCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CourseAccessPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a CourseAccess.
   * @param {CourseAccessDeleteArgs} args - Arguments to delete one CourseAccess.
   * @example
   * // Delete one CourseAccess
   * const CourseAccess = await prisma.courseAccess.delete({
   *   where: {
   *     // ... filter to delete one CourseAccess
   *   }
   * })
   * 
   */
  delete<T extends CourseAccessDeleteArgs>(args: Prisma.SelectSubset<T, CourseAccessDeleteArgs<ExtArgs>>): Prisma.Prisma__CourseAccessClient<runtime.Types.Result.GetResult<Prisma.$CourseAccessPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one CourseAccess.
   * @param {CourseAccessUpdateArgs} args - Arguments to update one CourseAccess.
   * @example
   * // Update one CourseAccess
   * const courseAccess = await prisma.courseAccess.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CourseAccessUpdateArgs>(args: Prisma.SelectSubset<T, CourseAccessUpdateArgs<ExtArgs>>): Prisma.Prisma__CourseAccessClient<runtime.Types.Result.GetResult<Prisma.$CourseAccessPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more CourseAccesses.
   * @param {CourseAccessDeleteManyArgs} args - Arguments to filter CourseAccesses to delete.
   * @example
   * // Delete a few CourseAccesses
   * const { count } = await prisma.courseAccess.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CourseAccessDeleteManyArgs>(args?: Prisma.SelectSubset<T, CourseAccessDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CourseAccesses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CourseAccessUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CourseAccesses
   * const courseAccess = await prisma.courseAccess.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CourseAccessUpdateManyArgs>(args: Prisma.SelectSubset<T, CourseAccessUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CourseAccesses and returns the data updated in the database.
   * @param {CourseAccessUpdateManyAndReturnArgs} args - Arguments to update many CourseAccesses.
   * @example
   * // Update many CourseAccesses
   * const courseAccess = await prisma.courseAccess.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more CourseAccesses and only return the `id`
   * const courseAccessWithIdOnly = await prisma.courseAccess.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CourseAccessUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CourseAccessUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CourseAccessPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one CourseAccess.
   * @param {CourseAccessUpsertArgs} args - Arguments to update or create a CourseAccess.
   * @example
   * // Update or create a CourseAccess
   * const courseAccess = await prisma.courseAccess.upsert({
   *   create: {
   *     // ... data to create a CourseAccess
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CourseAccess we want to update
   *   }
   * })
   */
  upsert<T extends CourseAccessUpsertArgs>(args: Prisma.SelectSubset<T, CourseAccessUpsertArgs<ExtArgs>>): Prisma.Prisma__CourseAccessClient<runtime.Types.Result.GetResult<Prisma.$CourseAccessPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of CourseAccesses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CourseAccessCountArgs} args - Arguments to filter CourseAccesses to count.
   * @example
   * // Count the number of CourseAccesses
   * const count = await prisma.courseAccess.count({
   *   where: {
   *     // ... the filter for the CourseAccesses we want to count
   *   }
   * })
  **/
  count<T extends CourseAccessCountArgs>(
    args?: Prisma.Subset<T, CourseAccessCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CourseAccessCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a CourseAccess.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CourseAccessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CourseAccessAggregateArgs>(args: Prisma.Subset<T, CourseAccessAggregateArgs>): Prisma.PrismaPromise<GetCourseAccessAggregateType<T>>

  /**
   * Group by CourseAccess.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CourseAccessGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CourseAccessGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CourseAccessGroupByArgs['orderBy'] }
      : { orderBy?: CourseAccessGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CourseAccessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseAccessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the CourseAccess model
 */
readonly fields: CourseAccessFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CourseAccess.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CourseAccessClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  course<T extends Prisma.CourseDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CourseDefaultArgs<ExtArgs>>): Prisma.Prisma__CourseClient<runtime.Types.Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the CourseAccess model
 */
export interface CourseAccessFieldRefs {
  readonly id: Prisma.FieldRef<"CourseAccess", 'String'>
  readonly user_id: Prisma.FieldRef<"CourseAccess", 'String'>
  readonly course_id: Prisma.FieldRef<"CourseAccess", 'String'>
  readonly unlocked_at: Prisma.FieldRef<"CourseAccess", 'DateTime'>
}
    

// Custom InputTypes
/**
 * CourseAccess findUnique
 */
export type CourseAccessFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CourseAccess
   */
  select?: Prisma.CourseAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CourseAccess
   */
  omit?: Prisma.CourseAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseAccessInclude<ExtArgs> | null
  /**
   * Filter, which CourseAccess to fetch.
   */
  where: Prisma.CourseAccessWhereUniqueInput
}

/**
 * CourseAccess findUniqueOrThrow
 */
export type CourseAccessFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CourseAccess
   */
  select?: Prisma.CourseAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CourseAccess
   */
  omit?: Prisma.CourseAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseAccessInclude<ExtArgs> | null
  /**
   * Filter, which CourseAccess to fetch.
   */
  where: Prisma.CourseAccessWhereUniqueInput
}

/**
 * CourseAccess findFirst
 */
export type CourseAccessFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CourseAccess
   */
  select?: Prisma.CourseAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CourseAccess
   */
  omit?: Prisma.CourseAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseAccessInclude<ExtArgs> | null
  /**
   * Filter, which CourseAccess to fetch.
   */
  where?: Prisma.CourseAccessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CourseAccesses to fetch.
   */
  orderBy?: Prisma.CourseAccessOrderByWithRelationInput | Prisma.CourseAccessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CourseAccesses.
   */
  cursor?: Prisma.CourseAccessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CourseAccesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CourseAccesses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CourseAccesses.
   */
  distinct?: Prisma.CourseAccessScalarFieldEnum | Prisma.CourseAccessScalarFieldEnum[]
}

/**
 * CourseAccess findFirstOrThrow
 */
export type CourseAccessFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CourseAccess
   */
  select?: Prisma.CourseAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CourseAccess
   */
  omit?: Prisma.CourseAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseAccessInclude<ExtArgs> | null
  /**
   * Filter, which CourseAccess to fetch.
   */
  where?: Prisma.CourseAccessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CourseAccesses to fetch.
   */
  orderBy?: Prisma.CourseAccessOrderByWithRelationInput | Prisma.CourseAccessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CourseAccesses.
   */
  cursor?: Prisma.CourseAccessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CourseAccesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CourseAccesses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CourseAccesses.
   */
  distinct?: Prisma.CourseAccessScalarFieldEnum | Prisma.CourseAccessScalarFieldEnum[]
}

/**
 * CourseAccess findMany
 */
export type CourseAccessFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CourseAccess
   */
  select?: Prisma.CourseAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CourseAccess
   */
  omit?: Prisma.CourseAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseAccessInclude<ExtArgs> | null
  /**
   * Filter, which CourseAccesses to fetch.
   */
  where?: Prisma.CourseAccessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CourseAccesses to fetch.
   */
  orderBy?: Prisma.CourseAccessOrderByWithRelationInput | Prisma.CourseAccessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing CourseAccesses.
   */
  cursor?: Prisma.CourseAccessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CourseAccesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CourseAccesses.
   */
  skip?: number
  distinct?: Prisma.CourseAccessScalarFieldEnum | Prisma.CourseAccessScalarFieldEnum[]
}

/**
 * CourseAccess create
 */
export type CourseAccessCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CourseAccess
   */
  select?: Prisma.CourseAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CourseAccess
   */
  omit?: Prisma.CourseAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseAccessInclude<ExtArgs> | null
  /**
   * The data needed to create a CourseAccess.
   */
  data: Prisma.XOR<Prisma.CourseAccessCreateInput, Prisma.CourseAccessUncheckedCreateInput>
}

/**
 * CourseAccess createMany
 */
export type CourseAccessCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many CourseAccesses.
   */
  data: Prisma.CourseAccessCreateManyInput | Prisma.CourseAccessCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CourseAccess createManyAndReturn
 */
export type CourseAccessCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CourseAccess
   */
  select?: Prisma.CourseAccessSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CourseAccess
   */
  omit?: Prisma.CourseAccessOmit<ExtArgs> | null
  /**
   * The data used to create many CourseAccesses.
   */
  data: Prisma.CourseAccessCreateManyInput | Prisma.CourseAccessCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseAccessIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * CourseAccess update
 */
export type CourseAccessUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CourseAccess
   */
  select?: Prisma.CourseAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CourseAccess
   */
  omit?: Prisma.CourseAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseAccessInclude<ExtArgs> | null
  /**
   * The data needed to update a CourseAccess.
   */
  data: Prisma.XOR<Prisma.CourseAccessUpdateInput, Prisma.CourseAccessUncheckedUpdateInput>
  /**
   * Choose, which CourseAccess to update.
   */
  where: Prisma.CourseAccessWhereUniqueInput
}

/**
 * CourseAccess updateMany
 */
export type CourseAccessUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update CourseAccesses.
   */
  data: Prisma.XOR<Prisma.CourseAccessUpdateManyMutationInput, Prisma.CourseAccessUncheckedUpdateManyInput>
  /**
   * Filter which CourseAccesses to update
   */
  where?: Prisma.CourseAccessWhereInput
  /**
   * Limit how many CourseAccesses to update.
   */
  limit?: number
}

/**
 * CourseAccess updateManyAndReturn
 */
export type CourseAccessUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CourseAccess
   */
  select?: Prisma.CourseAccessSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CourseAccess
   */
  omit?: Prisma.CourseAccessOmit<ExtArgs> | null
  /**
   * The data used to update CourseAccesses.
   */
  data: Prisma.XOR<Prisma.CourseAccessUpdateManyMutationInput, Prisma.CourseAccessUncheckedUpdateManyInput>
  /**
   * Filter which CourseAccesses to update
   */
  where?: Prisma.CourseAccessWhereInput
  /**
   * Limit how many CourseAccesses to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseAccessIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * CourseAccess upsert
 */
export type CourseAccessUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CourseAccess
   */
  select?: Prisma.CourseAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CourseAccess
   */
  omit?: Prisma.CourseAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseAccessInclude<ExtArgs> | null
  /**
   * The filter to search for the CourseAccess to update in case it exists.
   */
  where: Prisma.CourseAccessWhereUniqueInput
  /**
   * In case the CourseAccess found by the `where` argument doesn't exist, create a new CourseAccess with this data.
   */
  create: Prisma.XOR<Prisma.CourseAccessCreateInput, Prisma.CourseAccessUncheckedCreateInput>
  /**
   * In case the CourseAccess was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CourseAccessUpdateInput, Prisma.CourseAccessUncheckedUpdateInput>
}

/**
 * CourseAccess delete
 */
export type CourseAccessDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CourseAccess
   */
  select?: Prisma.CourseAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CourseAccess
   */
  omit?: Prisma.CourseAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseAccessInclude<ExtArgs> | null
  /**
   * Filter which CourseAccess to delete.
   */
  where: Prisma.CourseAccessWhereUniqueInput
}

/**
 * CourseAccess deleteMany
 */
export type CourseAccessDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CourseAccesses to delete
   */
  where?: Prisma.CourseAccessWhereInput
  /**
   * Limit how many CourseAccesses to delete.
   */
  limit?: number
}

/**
 * CourseAccess without action
 */
export type CourseAccessDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CourseAccess
   */
  select?: Prisma.CourseAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CourseAccess
   */
  omit?: Prisma.CourseAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseAccessInclude<ExtArgs> | null
}
