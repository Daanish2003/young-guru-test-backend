
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `CallSession` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model CallSession
 * 
 */
export type CallSessionModel = runtime.Types.Result.DefaultSelection<Prisma.$CallSessionPayload>

export type AggregateCallSession = {
  _count: CallSessionCountAggregateOutputType | null
  _min: CallSessionMinAggregateOutputType | null
  _max: CallSessionMaxAggregateOutputType | null
}

export type CallSessionMinAggregateOutputType = {
  id: string | null
  caller_id: string | null
  receiver_id: string | null
  channel: string | null
  token: string | null
  created_at: Date | null
}

export type CallSessionMaxAggregateOutputType = {
  id: string | null
  caller_id: string | null
  receiver_id: string | null
  channel: string | null
  token: string | null
  created_at: Date | null
}

export type CallSessionCountAggregateOutputType = {
  id: number
  caller_id: number
  receiver_id: number
  channel: number
  token: number
  created_at: number
  _all: number
}


export type CallSessionMinAggregateInputType = {
  id?: true
  caller_id?: true
  receiver_id?: true
  channel?: true
  token?: true
  created_at?: true
}

export type CallSessionMaxAggregateInputType = {
  id?: true
  caller_id?: true
  receiver_id?: true
  channel?: true
  token?: true
  created_at?: true
}

export type CallSessionCountAggregateInputType = {
  id?: true
  caller_id?: true
  receiver_id?: true
  channel?: true
  token?: true
  created_at?: true
  _all?: true
}

export type CallSessionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CallSession to aggregate.
   */
  where?: Prisma.CallSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CallSessions to fetch.
   */
  orderBy?: Prisma.CallSessionOrderByWithRelationInput | Prisma.CallSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CallSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CallSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CallSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned CallSessions
  **/
  _count?: true | CallSessionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CallSessionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CallSessionMaxAggregateInputType
}

export type GetCallSessionAggregateType<T extends CallSessionAggregateArgs> = {
      [P in keyof T & keyof AggregateCallSession]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCallSession[P]>
    : Prisma.GetScalarType<T[P], AggregateCallSession[P]>
}




export type CallSessionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CallSessionWhereInput
  orderBy?: Prisma.CallSessionOrderByWithAggregationInput | Prisma.CallSessionOrderByWithAggregationInput[]
  by: Prisma.CallSessionScalarFieldEnum[] | Prisma.CallSessionScalarFieldEnum
  having?: Prisma.CallSessionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CallSessionCountAggregateInputType | true
  _min?: CallSessionMinAggregateInputType
  _max?: CallSessionMaxAggregateInputType
}

export type CallSessionGroupByOutputType = {
  id: string
  caller_id: string
  receiver_id: string
  channel: string
  token: string
  created_at: Date
  _count: CallSessionCountAggregateOutputType | null
  _min: CallSessionMinAggregateOutputType | null
  _max: CallSessionMaxAggregateOutputType | null
}

type GetCallSessionGroupByPayload<T extends CallSessionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CallSessionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CallSessionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CallSessionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CallSessionGroupByOutputType[P]>
      }
    >
  > 



export type CallSessionWhereInput = {
  AND?: Prisma.CallSessionWhereInput | Prisma.CallSessionWhereInput[]
  OR?: Prisma.CallSessionWhereInput[]
  NOT?: Prisma.CallSessionWhereInput | Prisma.CallSessionWhereInput[]
  id?: Prisma.StringFilter<"CallSession"> | string
  caller_id?: Prisma.StringFilter<"CallSession"> | string
  receiver_id?: Prisma.StringFilter<"CallSession"> | string
  channel?: Prisma.StringFilter<"CallSession"> | string
  token?: Prisma.StringFilter<"CallSession"> | string
  created_at?: Prisma.DateTimeFilter<"CallSession"> | Date | string
  caller?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  receiver?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type CallSessionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  caller_id?: Prisma.SortOrder
  receiver_id?: Prisma.SortOrder
  channel?: Prisma.SortOrder
  token?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  caller?: Prisma.UserOrderByWithRelationInput
  receiver?: Prisma.UserOrderByWithRelationInput
}

export type CallSessionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.CallSessionWhereInput | Prisma.CallSessionWhereInput[]
  OR?: Prisma.CallSessionWhereInput[]
  NOT?: Prisma.CallSessionWhereInput | Prisma.CallSessionWhereInput[]
  caller_id?: Prisma.StringFilter<"CallSession"> | string
  receiver_id?: Prisma.StringFilter<"CallSession"> | string
  channel?: Prisma.StringFilter<"CallSession"> | string
  token?: Prisma.StringFilter<"CallSession"> | string
  created_at?: Prisma.DateTimeFilter<"CallSession"> | Date | string
  caller?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  receiver?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type CallSessionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  caller_id?: Prisma.SortOrder
  receiver_id?: Prisma.SortOrder
  channel?: Prisma.SortOrder
  token?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  _count?: Prisma.CallSessionCountOrderByAggregateInput
  _max?: Prisma.CallSessionMaxOrderByAggregateInput
  _min?: Prisma.CallSessionMinOrderByAggregateInput
}

export type CallSessionScalarWhereWithAggregatesInput = {
  AND?: Prisma.CallSessionScalarWhereWithAggregatesInput | Prisma.CallSessionScalarWhereWithAggregatesInput[]
  OR?: Prisma.CallSessionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CallSessionScalarWhereWithAggregatesInput | Prisma.CallSessionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"CallSession"> | string
  caller_id?: Prisma.StringWithAggregatesFilter<"CallSession"> | string
  receiver_id?: Prisma.StringWithAggregatesFilter<"CallSession"> | string
  channel?: Prisma.StringWithAggregatesFilter<"CallSession"> | string
  token?: Prisma.StringWithAggregatesFilter<"CallSession"> | string
  created_at?: Prisma.DateTimeWithAggregatesFilter<"CallSession"> | Date | string
}

export type CallSessionCreateInput = {
  id?: string
  channel: string
  token: string
  created_at?: Date | string
  caller: Prisma.UserCreateNestedOneWithoutCallSessionsAsCallerInput
  receiver: Prisma.UserCreateNestedOneWithoutCallSessionsAsReceiverInput
}

export type CallSessionUncheckedCreateInput = {
  id?: string
  caller_id: string
  receiver_id: string
  channel: string
  token: string
  created_at?: Date | string
}

export type CallSessionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  channel?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  caller?: Prisma.UserUpdateOneRequiredWithoutCallSessionsAsCallerNestedInput
  receiver?: Prisma.UserUpdateOneRequiredWithoutCallSessionsAsReceiverNestedInput
}

export type CallSessionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  caller_id?: Prisma.StringFieldUpdateOperationsInput | string
  receiver_id?: Prisma.StringFieldUpdateOperationsInput | string
  channel?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CallSessionCreateManyInput = {
  id?: string
  caller_id: string
  receiver_id: string
  channel: string
  token: string
  created_at?: Date | string
}

export type CallSessionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  channel?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CallSessionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  caller_id?: Prisma.StringFieldUpdateOperationsInput | string
  receiver_id?: Prisma.StringFieldUpdateOperationsInput | string
  channel?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CallSessionListRelationFilter = {
  every?: Prisma.CallSessionWhereInput
  some?: Prisma.CallSessionWhereInput
  none?: Prisma.CallSessionWhereInput
}

export type CallSessionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CallSessionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  caller_id?: Prisma.SortOrder
  receiver_id?: Prisma.SortOrder
  channel?: Prisma.SortOrder
  token?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type CallSessionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  caller_id?: Prisma.SortOrder
  receiver_id?: Prisma.SortOrder
  channel?: Prisma.SortOrder
  token?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type CallSessionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  caller_id?: Prisma.SortOrder
  receiver_id?: Prisma.SortOrder
  channel?: Prisma.SortOrder
  token?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type CallSessionCreateNestedManyWithoutCallerInput = {
  create?: Prisma.XOR<Prisma.CallSessionCreateWithoutCallerInput, Prisma.CallSessionUncheckedCreateWithoutCallerInput> | Prisma.CallSessionCreateWithoutCallerInput[] | Prisma.CallSessionUncheckedCreateWithoutCallerInput[]
  connectOrCreate?: Prisma.CallSessionCreateOrConnectWithoutCallerInput | Prisma.CallSessionCreateOrConnectWithoutCallerInput[]
  createMany?: Prisma.CallSessionCreateManyCallerInputEnvelope
  connect?: Prisma.CallSessionWhereUniqueInput | Prisma.CallSessionWhereUniqueInput[]
}

export type CallSessionCreateNestedManyWithoutReceiverInput = {
  create?: Prisma.XOR<Prisma.CallSessionCreateWithoutReceiverInput, Prisma.CallSessionUncheckedCreateWithoutReceiverInput> | Prisma.CallSessionCreateWithoutReceiverInput[] | Prisma.CallSessionUncheckedCreateWithoutReceiverInput[]
  connectOrCreate?: Prisma.CallSessionCreateOrConnectWithoutReceiverInput | Prisma.CallSessionCreateOrConnectWithoutReceiverInput[]
  createMany?: Prisma.CallSessionCreateManyReceiverInputEnvelope
  connect?: Prisma.CallSessionWhereUniqueInput | Prisma.CallSessionWhereUniqueInput[]
}

export type CallSessionUncheckedCreateNestedManyWithoutCallerInput = {
  create?: Prisma.XOR<Prisma.CallSessionCreateWithoutCallerInput, Prisma.CallSessionUncheckedCreateWithoutCallerInput> | Prisma.CallSessionCreateWithoutCallerInput[] | Prisma.CallSessionUncheckedCreateWithoutCallerInput[]
  connectOrCreate?: Prisma.CallSessionCreateOrConnectWithoutCallerInput | Prisma.CallSessionCreateOrConnectWithoutCallerInput[]
  createMany?: Prisma.CallSessionCreateManyCallerInputEnvelope
  connect?: Prisma.CallSessionWhereUniqueInput | Prisma.CallSessionWhereUniqueInput[]
}

export type CallSessionUncheckedCreateNestedManyWithoutReceiverInput = {
  create?: Prisma.XOR<Prisma.CallSessionCreateWithoutReceiverInput, Prisma.CallSessionUncheckedCreateWithoutReceiverInput> | Prisma.CallSessionCreateWithoutReceiverInput[] | Prisma.CallSessionUncheckedCreateWithoutReceiverInput[]
  connectOrCreate?: Prisma.CallSessionCreateOrConnectWithoutReceiverInput | Prisma.CallSessionCreateOrConnectWithoutReceiverInput[]
  createMany?: Prisma.CallSessionCreateManyReceiverInputEnvelope
  connect?: Prisma.CallSessionWhereUniqueInput | Prisma.CallSessionWhereUniqueInput[]
}

export type CallSessionUpdateManyWithoutCallerNestedInput = {
  create?: Prisma.XOR<Prisma.CallSessionCreateWithoutCallerInput, Prisma.CallSessionUncheckedCreateWithoutCallerInput> | Prisma.CallSessionCreateWithoutCallerInput[] | Prisma.CallSessionUncheckedCreateWithoutCallerInput[]
  connectOrCreate?: Prisma.CallSessionCreateOrConnectWithoutCallerInput | Prisma.CallSessionCreateOrConnectWithoutCallerInput[]
  upsert?: Prisma.CallSessionUpsertWithWhereUniqueWithoutCallerInput | Prisma.CallSessionUpsertWithWhereUniqueWithoutCallerInput[]
  createMany?: Prisma.CallSessionCreateManyCallerInputEnvelope
  set?: Prisma.CallSessionWhereUniqueInput | Prisma.CallSessionWhereUniqueInput[]
  disconnect?: Prisma.CallSessionWhereUniqueInput | Prisma.CallSessionWhereUniqueInput[]
  delete?: Prisma.CallSessionWhereUniqueInput | Prisma.CallSessionWhereUniqueInput[]
  connect?: Prisma.CallSessionWhereUniqueInput | Prisma.CallSessionWhereUniqueInput[]
  update?: Prisma.CallSessionUpdateWithWhereUniqueWithoutCallerInput | Prisma.CallSessionUpdateWithWhereUniqueWithoutCallerInput[]
  updateMany?: Prisma.CallSessionUpdateManyWithWhereWithoutCallerInput | Prisma.CallSessionUpdateManyWithWhereWithoutCallerInput[]
  deleteMany?: Prisma.CallSessionScalarWhereInput | Prisma.CallSessionScalarWhereInput[]
}

export type CallSessionUpdateManyWithoutReceiverNestedInput = {
  create?: Prisma.XOR<Prisma.CallSessionCreateWithoutReceiverInput, Prisma.CallSessionUncheckedCreateWithoutReceiverInput> | Prisma.CallSessionCreateWithoutReceiverInput[] | Prisma.CallSessionUncheckedCreateWithoutReceiverInput[]
  connectOrCreate?: Prisma.CallSessionCreateOrConnectWithoutReceiverInput | Prisma.CallSessionCreateOrConnectWithoutReceiverInput[]
  upsert?: Prisma.CallSessionUpsertWithWhereUniqueWithoutReceiverInput | Prisma.CallSessionUpsertWithWhereUniqueWithoutReceiverInput[]
  createMany?: Prisma.CallSessionCreateManyReceiverInputEnvelope
  set?: Prisma.CallSessionWhereUniqueInput | Prisma.CallSessionWhereUniqueInput[]
  disconnect?: Prisma.CallSessionWhereUniqueInput | Prisma.CallSessionWhereUniqueInput[]
  delete?: Prisma.CallSessionWhereUniqueInput | Prisma.CallSessionWhereUniqueInput[]
  connect?: Prisma.CallSessionWhereUniqueInput | Prisma.CallSessionWhereUniqueInput[]
  update?: Prisma.CallSessionUpdateWithWhereUniqueWithoutReceiverInput | Prisma.CallSessionUpdateWithWhereUniqueWithoutReceiverInput[]
  updateMany?: Prisma.CallSessionUpdateManyWithWhereWithoutReceiverInput | Prisma.CallSessionUpdateManyWithWhereWithoutReceiverInput[]
  deleteMany?: Prisma.CallSessionScalarWhereInput | Prisma.CallSessionScalarWhereInput[]
}

export type CallSessionUncheckedUpdateManyWithoutCallerNestedInput = {
  create?: Prisma.XOR<Prisma.CallSessionCreateWithoutCallerInput, Prisma.CallSessionUncheckedCreateWithoutCallerInput> | Prisma.CallSessionCreateWithoutCallerInput[] | Prisma.CallSessionUncheckedCreateWithoutCallerInput[]
  connectOrCreate?: Prisma.CallSessionCreateOrConnectWithoutCallerInput | Prisma.CallSessionCreateOrConnectWithoutCallerInput[]
  upsert?: Prisma.CallSessionUpsertWithWhereUniqueWithoutCallerInput | Prisma.CallSessionUpsertWithWhereUniqueWithoutCallerInput[]
  createMany?: Prisma.CallSessionCreateManyCallerInputEnvelope
  set?: Prisma.CallSessionWhereUniqueInput | Prisma.CallSessionWhereUniqueInput[]
  disconnect?: Prisma.CallSessionWhereUniqueInput | Prisma.CallSessionWhereUniqueInput[]
  delete?: Prisma.CallSessionWhereUniqueInput | Prisma.CallSessionWhereUniqueInput[]
  connect?: Prisma.CallSessionWhereUniqueInput | Prisma.CallSessionWhereUniqueInput[]
  update?: Prisma.CallSessionUpdateWithWhereUniqueWithoutCallerInput | Prisma.CallSessionUpdateWithWhereUniqueWithoutCallerInput[]
  updateMany?: Prisma.CallSessionUpdateManyWithWhereWithoutCallerInput | Prisma.CallSessionUpdateManyWithWhereWithoutCallerInput[]
  deleteMany?: Prisma.CallSessionScalarWhereInput | Prisma.CallSessionScalarWhereInput[]
}

export type CallSessionUncheckedUpdateManyWithoutReceiverNestedInput = {
  create?: Prisma.XOR<Prisma.CallSessionCreateWithoutReceiverInput, Prisma.CallSessionUncheckedCreateWithoutReceiverInput> | Prisma.CallSessionCreateWithoutReceiverInput[] | Prisma.CallSessionUncheckedCreateWithoutReceiverInput[]
  connectOrCreate?: Prisma.CallSessionCreateOrConnectWithoutReceiverInput | Prisma.CallSessionCreateOrConnectWithoutReceiverInput[]
  upsert?: Prisma.CallSessionUpsertWithWhereUniqueWithoutReceiverInput | Prisma.CallSessionUpsertWithWhereUniqueWithoutReceiverInput[]
  createMany?: Prisma.CallSessionCreateManyReceiverInputEnvelope
  set?: Prisma.CallSessionWhereUniqueInput | Prisma.CallSessionWhereUniqueInput[]
  disconnect?: Prisma.CallSessionWhereUniqueInput | Prisma.CallSessionWhereUniqueInput[]
  delete?: Prisma.CallSessionWhereUniqueInput | Prisma.CallSessionWhereUniqueInput[]
  connect?: Prisma.CallSessionWhereUniqueInput | Prisma.CallSessionWhereUniqueInput[]
  update?: Prisma.CallSessionUpdateWithWhereUniqueWithoutReceiverInput | Prisma.CallSessionUpdateWithWhereUniqueWithoutReceiverInput[]
  updateMany?: Prisma.CallSessionUpdateManyWithWhereWithoutReceiverInput | Prisma.CallSessionUpdateManyWithWhereWithoutReceiverInput[]
  deleteMany?: Prisma.CallSessionScalarWhereInput | Prisma.CallSessionScalarWhereInput[]
}

export type CallSessionCreateWithoutCallerInput = {
  id?: string
  channel: string
  token: string
  created_at?: Date | string
  receiver: Prisma.UserCreateNestedOneWithoutCallSessionsAsReceiverInput
}

export type CallSessionUncheckedCreateWithoutCallerInput = {
  id?: string
  receiver_id: string
  channel: string
  token: string
  created_at?: Date | string
}

export type CallSessionCreateOrConnectWithoutCallerInput = {
  where: Prisma.CallSessionWhereUniqueInput
  create: Prisma.XOR<Prisma.CallSessionCreateWithoutCallerInput, Prisma.CallSessionUncheckedCreateWithoutCallerInput>
}

export type CallSessionCreateManyCallerInputEnvelope = {
  data: Prisma.CallSessionCreateManyCallerInput | Prisma.CallSessionCreateManyCallerInput[]
  skipDuplicates?: boolean
}

export type CallSessionCreateWithoutReceiverInput = {
  id?: string
  channel: string
  token: string
  created_at?: Date | string
  caller: Prisma.UserCreateNestedOneWithoutCallSessionsAsCallerInput
}

export type CallSessionUncheckedCreateWithoutReceiverInput = {
  id?: string
  caller_id: string
  channel: string
  token: string
  created_at?: Date | string
}

export type CallSessionCreateOrConnectWithoutReceiverInput = {
  where: Prisma.CallSessionWhereUniqueInput
  create: Prisma.XOR<Prisma.CallSessionCreateWithoutReceiverInput, Prisma.CallSessionUncheckedCreateWithoutReceiverInput>
}

export type CallSessionCreateManyReceiverInputEnvelope = {
  data: Prisma.CallSessionCreateManyReceiverInput | Prisma.CallSessionCreateManyReceiverInput[]
  skipDuplicates?: boolean
}

export type CallSessionUpsertWithWhereUniqueWithoutCallerInput = {
  where: Prisma.CallSessionWhereUniqueInput
  update: Prisma.XOR<Prisma.CallSessionUpdateWithoutCallerInput, Prisma.CallSessionUncheckedUpdateWithoutCallerInput>
  create: Prisma.XOR<Prisma.CallSessionCreateWithoutCallerInput, Prisma.CallSessionUncheckedCreateWithoutCallerInput>
}

export type CallSessionUpdateWithWhereUniqueWithoutCallerInput = {
  where: Prisma.CallSessionWhereUniqueInput
  data: Prisma.XOR<Prisma.CallSessionUpdateWithoutCallerInput, Prisma.CallSessionUncheckedUpdateWithoutCallerInput>
}

export type CallSessionUpdateManyWithWhereWithoutCallerInput = {
  where: Prisma.CallSessionScalarWhereInput
  data: Prisma.XOR<Prisma.CallSessionUpdateManyMutationInput, Prisma.CallSessionUncheckedUpdateManyWithoutCallerInput>
}

export type CallSessionScalarWhereInput = {
  AND?: Prisma.CallSessionScalarWhereInput | Prisma.CallSessionScalarWhereInput[]
  OR?: Prisma.CallSessionScalarWhereInput[]
  NOT?: Prisma.CallSessionScalarWhereInput | Prisma.CallSessionScalarWhereInput[]
  id?: Prisma.StringFilter<"CallSession"> | string
  caller_id?: Prisma.StringFilter<"CallSession"> | string
  receiver_id?: Prisma.StringFilter<"CallSession"> | string
  channel?: Prisma.StringFilter<"CallSession"> | string
  token?: Prisma.StringFilter<"CallSession"> | string
  created_at?: Prisma.DateTimeFilter<"CallSession"> | Date | string
}

export type CallSessionUpsertWithWhereUniqueWithoutReceiverInput = {
  where: Prisma.CallSessionWhereUniqueInput
  update: Prisma.XOR<Prisma.CallSessionUpdateWithoutReceiverInput, Prisma.CallSessionUncheckedUpdateWithoutReceiverInput>
  create: Prisma.XOR<Prisma.CallSessionCreateWithoutReceiverInput, Prisma.CallSessionUncheckedCreateWithoutReceiverInput>
}

export type CallSessionUpdateWithWhereUniqueWithoutReceiverInput = {
  where: Prisma.CallSessionWhereUniqueInput
  data: Prisma.XOR<Prisma.CallSessionUpdateWithoutReceiverInput, Prisma.CallSessionUncheckedUpdateWithoutReceiverInput>
}

export type CallSessionUpdateManyWithWhereWithoutReceiverInput = {
  where: Prisma.CallSessionScalarWhereInput
  data: Prisma.XOR<Prisma.CallSessionUpdateManyMutationInput, Prisma.CallSessionUncheckedUpdateManyWithoutReceiverInput>
}

export type CallSessionCreateManyCallerInput = {
  id?: string
  receiver_id: string
  channel: string
  token: string
  created_at?: Date | string
}

export type CallSessionCreateManyReceiverInput = {
  id?: string
  caller_id: string
  channel: string
  token: string
  created_at?: Date | string
}

export type CallSessionUpdateWithoutCallerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  channel?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  receiver?: Prisma.UserUpdateOneRequiredWithoutCallSessionsAsReceiverNestedInput
}

export type CallSessionUncheckedUpdateWithoutCallerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  receiver_id?: Prisma.StringFieldUpdateOperationsInput | string
  channel?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CallSessionUncheckedUpdateManyWithoutCallerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  receiver_id?: Prisma.StringFieldUpdateOperationsInput | string
  channel?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CallSessionUpdateWithoutReceiverInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  channel?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  caller?: Prisma.UserUpdateOneRequiredWithoutCallSessionsAsCallerNestedInput
}

export type CallSessionUncheckedUpdateWithoutReceiverInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  caller_id?: Prisma.StringFieldUpdateOperationsInput | string
  channel?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CallSessionUncheckedUpdateManyWithoutReceiverInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  caller_id?: Prisma.StringFieldUpdateOperationsInput | string
  channel?: Prisma.StringFieldUpdateOperationsInput | string
  token?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type CallSessionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  caller_id?: boolean
  receiver_id?: boolean
  channel?: boolean
  token?: boolean
  created_at?: boolean
  caller?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  receiver?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["callSession"]>

export type CallSessionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  caller_id?: boolean
  receiver_id?: boolean
  channel?: boolean
  token?: boolean
  created_at?: boolean
  caller?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  receiver?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["callSession"]>

export type CallSessionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  caller_id?: boolean
  receiver_id?: boolean
  channel?: boolean
  token?: boolean
  created_at?: boolean
  caller?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  receiver?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["callSession"]>

export type CallSessionSelectScalar = {
  id?: boolean
  caller_id?: boolean
  receiver_id?: boolean
  channel?: boolean
  token?: boolean
  created_at?: boolean
}

export type CallSessionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "caller_id" | "receiver_id" | "channel" | "token" | "created_at", ExtArgs["result"]["callSession"]>
export type CallSessionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  caller?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  receiver?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type CallSessionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  caller?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  receiver?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type CallSessionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  caller?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  receiver?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $CallSessionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "CallSession"
  objects: {
    caller: Prisma.$UserPayload<ExtArgs>
    receiver: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    caller_id: string
    receiver_id: string
    channel: string
    token: string
    created_at: Date
  }, ExtArgs["result"]["callSession"]>
  composites: {}
}

export type CallSessionGetPayload<S extends boolean | null | undefined | CallSessionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CallSessionPayload, S>

export type CallSessionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CallSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CallSessionCountAggregateInputType | true
  }

export interface CallSessionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CallSession'], meta: { name: 'CallSession' } }
  /**
   * Find zero or one CallSession that matches the filter.
   * @param {CallSessionFindUniqueArgs} args - Arguments to find a CallSession
   * @example
   * // Get one CallSession
   * const callSession = await prisma.callSession.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CallSessionFindUniqueArgs>(args: Prisma.SelectSubset<T, CallSessionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CallSessionClient<runtime.Types.Result.GetResult<Prisma.$CallSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one CallSession that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CallSessionFindUniqueOrThrowArgs} args - Arguments to find a CallSession
   * @example
   * // Get one CallSession
   * const callSession = await prisma.callSession.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CallSessionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CallSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CallSessionClient<runtime.Types.Result.GetResult<Prisma.$CallSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CallSession that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CallSessionFindFirstArgs} args - Arguments to find a CallSession
   * @example
   * // Get one CallSession
   * const callSession = await prisma.callSession.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CallSessionFindFirstArgs>(args?: Prisma.SelectSubset<T, CallSessionFindFirstArgs<ExtArgs>>): Prisma.Prisma__CallSessionClient<runtime.Types.Result.GetResult<Prisma.$CallSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CallSession that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CallSessionFindFirstOrThrowArgs} args - Arguments to find a CallSession
   * @example
   * // Get one CallSession
   * const callSession = await prisma.callSession.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CallSessionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CallSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CallSessionClient<runtime.Types.Result.GetResult<Prisma.$CallSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more CallSessions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CallSessionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CallSessions
   * const callSessions = await prisma.callSession.findMany()
   * 
   * // Get first 10 CallSessions
   * const callSessions = await prisma.callSession.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const callSessionWithIdOnly = await prisma.callSession.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CallSessionFindManyArgs>(args?: Prisma.SelectSubset<T, CallSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CallSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a CallSession.
   * @param {CallSessionCreateArgs} args - Arguments to create a CallSession.
   * @example
   * // Create one CallSession
   * const CallSession = await prisma.callSession.create({
   *   data: {
   *     // ... data to create a CallSession
   *   }
   * })
   * 
   */
  create<T extends CallSessionCreateArgs>(args: Prisma.SelectSubset<T, CallSessionCreateArgs<ExtArgs>>): Prisma.Prisma__CallSessionClient<runtime.Types.Result.GetResult<Prisma.$CallSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many CallSessions.
   * @param {CallSessionCreateManyArgs} args - Arguments to create many CallSessions.
   * @example
   * // Create many CallSessions
   * const callSession = await prisma.callSession.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CallSessionCreateManyArgs>(args?: Prisma.SelectSubset<T, CallSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many CallSessions and returns the data saved in the database.
   * @param {CallSessionCreateManyAndReturnArgs} args - Arguments to create many CallSessions.
   * @example
   * // Create many CallSessions
   * const callSession = await prisma.callSession.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many CallSessions and only return the `id`
   * const callSessionWithIdOnly = await prisma.callSession.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CallSessionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CallSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CallSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a CallSession.
   * @param {CallSessionDeleteArgs} args - Arguments to delete one CallSession.
   * @example
   * // Delete one CallSession
   * const CallSession = await prisma.callSession.delete({
   *   where: {
   *     // ... filter to delete one CallSession
   *   }
   * })
   * 
   */
  delete<T extends CallSessionDeleteArgs>(args: Prisma.SelectSubset<T, CallSessionDeleteArgs<ExtArgs>>): Prisma.Prisma__CallSessionClient<runtime.Types.Result.GetResult<Prisma.$CallSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one CallSession.
   * @param {CallSessionUpdateArgs} args - Arguments to update one CallSession.
   * @example
   * // Update one CallSession
   * const callSession = await prisma.callSession.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CallSessionUpdateArgs>(args: Prisma.SelectSubset<T, CallSessionUpdateArgs<ExtArgs>>): Prisma.Prisma__CallSessionClient<runtime.Types.Result.GetResult<Prisma.$CallSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more CallSessions.
   * @param {CallSessionDeleteManyArgs} args - Arguments to filter CallSessions to delete.
   * @example
   * // Delete a few CallSessions
   * const { count } = await prisma.callSession.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CallSessionDeleteManyArgs>(args?: Prisma.SelectSubset<T, CallSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CallSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CallSessionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CallSessions
   * const callSession = await prisma.callSession.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CallSessionUpdateManyArgs>(args: Prisma.SelectSubset<T, CallSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CallSessions and returns the data updated in the database.
   * @param {CallSessionUpdateManyAndReturnArgs} args - Arguments to update many CallSessions.
   * @example
   * // Update many CallSessions
   * const callSession = await prisma.callSession.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more CallSessions and only return the `id`
   * const callSessionWithIdOnly = await prisma.callSession.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CallSessionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CallSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CallSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one CallSession.
   * @param {CallSessionUpsertArgs} args - Arguments to update or create a CallSession.
   * @example
   * // Update or create a CallSession
   * const callSession = await prisma.callSession.upsert({
   *   create: {
   *     // ... data to create a CallSession
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CallSession we want to update
   *   }
   * })
   */
  upsert<T extends CallSessionUpsertArgs>(args: Prisma.SelectSubset<T, CallSessionUpsertArgs<ExtArgs>>): Prisma.Prisma__CallSessionClient<runtime.Types.Result.GetResult<Prisma.$CallSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of CallSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CallSessionCountArgs} args - Arguments to filter CallSessions to count.
   * @example
   * // Count the number of CallSessions
   * const count = await prisma.callSession.count({
   *   where: {
   *     // ... the filter for the CallSessions we want to count
   *   }
   * })
  **/
  count<T extends CallSessionCountArgs>(
    args?: Prisma.Subset<T, CallSessionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CallSessionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a CallSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CallSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CallSessionAggregateArgs>(args: Prisma.Subset<T, CallSessionAggregateArgs>): Prisma.PrismaPromise<GetCallSessionAggregateType<T>>

  /**
   * Group by CallSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CallSessionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CallSessionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CallSessionGroupByArgs['orderBy'] }
      : { orderBy?: CallSessionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CallSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCallSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the CallSession model
 */
readonly fields: CallSessionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CallSession.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CallSessionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  caller<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  receiver<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the CallSession model
 */
export interface CallSessionFieldRefs {
  readonly id: Prisma.FieldRef<"CallSession", 'String'>
  readonly caller_id: Prisma.FieldRef<"CallSession", 'String'>
  readonly receiver_id: Prisma.FieldRef<"CallSession", 'String'>
  readonly channel: Prisma.FieldRef<"CallSession", 'String'>
  readonly token: Prisma.FieldRef<"CallSession", 'String'>
  readonly created_at: Prisma.FieldRef<"CallSession", 'DateTime'>
}
    

// Custom InputTypes
/**
 * CallSession findUnique
 */
export type CallSessionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CallSession
   */
  select?: Prisma.CallSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CallSession
   */
  omit?: Prisma.CallSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CallSessionInclude<ExtArgs> | null
  /**
   * Filter, which CallSession to fetch.
   */
  where: Prisma.CallSessionWhereUniqueInput
}

/**
 * CallSession findUniqueOrThrow
 */
export type CallSessionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CallSession
   */
  select?: Prisma.CallSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CallSession
   */
  omit?: Prisma.CallSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CallSessionInclude<ExtArgs> | null
  /**
   * Filter, which CallSession to fetch.
   */
  where: Prisma.CallSessionWhereUniqueInput
}

/**
 * CallSession findFirst
 */
export type CallSessionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CallSession
   */
  select?: Prisma.CallSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CallSession
   */
  omit?: Prisma.CallSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CallSessionInclude<ExtArgs> | null
  /**
   * Filter, which CallSession to fetch.
   */
  where?: Prisma.CallSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CallSessions to fetch.
   */
  orderBy?: Prisma.CallSessionOrderByWithRelationInput | Prisma.CallSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CallSessions.
   */
  cursor?: Prisma.CallSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CallSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CallSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CallSessions.
   */
  distinct?: Prisma.CallSessionScalarFieldEnum | Prisma.CallSessionScalarFieldEnum[]
}

/**
 * CallSession findFirstOrThrow
 */
export type CallSessionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CallSession
   */
  select?: Prisma.CallSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CallSession
   */
  omit?: Prisma.CallSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CallSessionInclude<ExtArgs> | null
  /**
   * Filter, which CallSession to fetch.
   */
  where?: Prisma.CallSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CallSessions to fetch.
   */
  orderBy?: Prisma.CallSessionOrderByWithRelationInput | Prisma.CallSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CallSessions.
   */
  cursor?: Prisma.CallSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CallSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CallSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CallSessions.
   */
  distinct?: Prisma.CallSessionScalarFieldEnum | Prisma.CallSessionScalarFieldEnum[]
}

/**
 * CallSession findMany
 */
export type CallSessionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CallSession
   */
  select?: Prisma.CallSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CallSession
   */
  omit?: Prisma.CallSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CallSessionInclude<ExtArgs> | null
  /**
   * Filter, which CallSessions to fetch.
   */
  where?: Prisma.CallSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CallSessions to fetch.
   */
  orderBy?: Prisma.CallSessionOrderByWithRelationInput | Prisma.CallSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing CallSessions.
   */
  cursor?: Prisma.CallSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CallSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CallSessions.
   */
  skip?: number
  distinct?: Prisma.CallSessionScalarFieldEnum | Prisma.CallSessionScalarFieldEnum[]
}

/**
 * CallSession create
 */
export type CallSessionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CallSession
   */
  select?: Prisma.CallSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CallSession
   */
  omit?: Prisma.CallSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CallSessionInclude<ExtArgs> | null
  /**
   * The data needed to create a CallSession.
   */
  data: Prisma.XOR<Prisma.CallSessionCreateInput, Prisma.CallSessionUncheckedCreateInput>
}

/**
 * CallSession createMany
 */
export type CallSessionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many CallSessions.
   */
  data: Prisma.CallSessionCreateManyInput | Prisma.CallSessionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CallSession createManyAndReturn
 */
export type CallSessionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CallSession
   */
  select?: Prisma.CallSessionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CallSession
   */
  omit?: Prisma.CallSessionOmit<ExtArgs> | null
  /**
   * The data used to create many CallSessions.
   */
  data: Prisma.CallSessionCreateManyInput | Prisma.CallSessionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CallSessionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * CallSession update
 */
export type CallSessionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CallSession
   */
  select?: Prisma.CallSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CallSession
   */
  omit?: Prisma.CallSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CallSessionInclude<ExtArgs> | null
  /**
   * The data needed to update a CallSession.
   */
  data: Prisma.XOR<Prisma.CallSessionUpdateInput, Prisma.CallSessionUncheckedUpdateInput>
  /**
   * Choose, which CallSession to update.
   */
  where: Prisma.CallSessionWhereUniqueInput
}

/**
 * CallSession updateMany
 */
export type CallSessionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update CallSessions.
   */
  data: Prisma.XOR<Prisma.CallSessionUpdateManyMutationInput, Prisma.CallSessionUncheckedUpdateManyInput>
  /**
   * Filter which CallSessions to update
   */
  where?: Prisma.CallSessionWhereInput
  /**
   * Limit how many CallSessions to update.
   */
  limit?: number
}

/**
 * CallSession updateManyAndReturn
 */
export type CallSessionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CallSession
   */
  select?: Prisma.CallSessionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CallSession
   */
  omit?: Prisma.CallSessionOmit<ExtArgs> | null
  /**
   * The data used to update CallSessions.
   */
  data: Prisma.XOR<Prisma.CallSessionUpdateManyMutationInput, Prisma.CallSessionUncheckedUpdateManyInput>
  /**
   * Filter which CallSessions to update
   */
  where?: Prisma.CallSessionWhereInput
  /**
   * Limit how many CallSessions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CallSessionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * CallSession upsert
 */
export type CallSessionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CallSession
   */
  select?: Prisma.CallSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CallSession
   */
  omit?: Prisma.CallSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CallSessionInclude<ExtArgs> | null
  /**
   * The filter to search for the CallSession to update in case it exists.
   */
  where: Prisma.CallSessionWhereUniqueInput
  /**
   * In case the CallSession found by the `where` argument doesn't exist, create a new CallSession with this data.
   */
  create: Prisma.XOR<Prisma.CallSessionCreateInput, Prisma.CallSessionUncheckedCreateInput>
  /**
   * In case the CallSession was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CallSessionUpdateInput, Prisma.CallSessionUncheckedUpdateInput>
}

/**
 * CallSession delete
 */
export type CallSessionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CallSession
   */
  select?: Prisma.CallSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CallSession
   */
  omit?: Prisma.CallSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CallSessionInclude<ExtArgs> | null
  /**
   * Filter which CallSession to delete.
   */
  where: Prisma.CallSessionWhereUniqueInput
}

/**
 * CallSession deleteMany
 */
export type CallSessionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CallSessions to delete
   */
  where?: Prisma.CallSessionWhereInput
  /**
   * Limit how many CallSessions to delete.
   */
  limit?: number
}

/**
 * CallSession without action
 */
export type CallSessionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CallSession
   */
  select?: Prisma.CallSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CallSession
   */
  omit?: Prisma.CallSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CallSessionInclude<ExtArgs> | null
}
